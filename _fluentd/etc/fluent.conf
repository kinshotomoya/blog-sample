<source>
  # 読み込み
  # typeはプラグイン名
  @type tail
  path /var/log/nginx/docker.access.log
  # fluentdがログの元ファイルのどこまで読み込んだかを記録するファイル
  pos_file /tmp/access.log.pos
  # formatを指定することで、その形式にあったログを抽出してくれる
  format nginx
  # tagの名前は好きにつけることができる
  # 下の<match>で利用する
  tag nginx.access
</source>

<match nginx.access>
  # 転送処理
  @type elasticsearch
  # 転送先のESを指定
  host elasticsearch
  port 9200
  # kibanaで利用するためにindexの形式を整える
  logstash_format true
  logstash_
refix nginx
  # ESのtypeを指定する
  type_name accesslogs
</match>

# <source>
  # forwardプラグインは、http経由でログを収集する。

  # アプリケーションからログを受け取る
  # go側で、fluentdクライアントを用いてログを送信している
  # @type forward
  # port 24224
# </source>

<match blog.search>
  # アプリケーション側で、。blog.searchというタグでログを送信する
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true
  logstash_prefix search
  type_name searchlogs
</match>

#   debug.testタグにマッチしたログを整形する
# コンテナ内で、echo '{"message": "sss"}' | /opt/td-agent/embedded/bin/fluent-cat debug.test
#　ログを送る。
<filter debug.test>
  @type record_transformer
  <record>
    # 以下のfieldを追加する
    hostname "#{Socket.gethostname}"
    tag ${tag}
  </record>
</filter>

<match debug.test>
  @type stdout
</match>


# 以下は、labelの例

# app.myapp.eventsというタグでフィルターをかける
# record追加
<filter app.myapp.events>
  @type record_transformer
    <record>
      host ${hostname}
    </record>
</filter>

# messageというキーにerrorという文字列が含まれているものをグレップする
<filter app.myapp.events>
  @type grep
  regexp1 message error
</filter>

<match app.myapp.events>
  @type stdout
</match>

# 上記のようなtagがいっぱいあるのを、labelを使うことで簡潔に使うことができる。


<source>
  @id in_forward
  @type forward
  @label @myapp_event_label
</source>

<label @myapp_event_label>
  <filter>
    @type record_transformer
    <record>
      host ${hostname}
    </record>
  </filter>

  <filter>
    @type grep
    regexp1 message kinsho
  </filter>

  <match **>
    @type stdout
  </match>
</label>